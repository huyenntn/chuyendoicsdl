<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAICAAAAEAIACoEAAAJgAAABAQAAABACAAaAQAAM4QAAAoAAAAIAAAAEAAAAABACAAAAAAAAAQ
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALxjjPjAY
        434xGOOfMhjjvzMY4+80GOP/NRjj3zYY4483GOM+OBjkDqJWAB6iVgA+olYAPqJWAD6iVgAeAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsGOM+LRjjny4Y
        4+8vGOP/MBjj/zEY4/8yGOP/Mxjj7zQY424AAAAAo1cALqdbAG6pXgDPqmAA/6pgAP+qXwD/qV8A/6Zb
        AP+kWADPo1gAbqJWAB4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoGOMuKhjjvywY
        4/8tGOP/Lhjj/y8Y4/8wGOP/MRjj/zIY488zGOMepVkADqhdAJ+qYAD/rWQA/69nAP+xaQD/s2sA/7Rs
        AP+0bAD/tGwA/7JpAP+tYwD/p1wA/6RZAH4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJhjjfikY
        4/8rGOP/LBjj/y0Y4/8uGOP/Lxjj/zAY4/8xGOOfAAAAAKRZAD6nXADvq2EA/65lAP+waAD/smoA/7Rs
        AP+1bgD/tm8A/7dwAP+4cQD/uHEA/7hxAP+1bAD/rmQA/6dcAL+iVgAOAAAAAAAAAAAAAAAAAAAAACMY
        458nGOP/Khjj/ysY4/8sGOP/LRjj/y4Y4/8vGOP/LxjjnwAAAACjWABeplsA/6pgAJ+tYwBOr2UADgAA
        AAC0bAAutm8AfrhxAO+5cgD/unMA/7p0AP+7dQD/u3UA/7t0AP+5cQD/s2oA/6lfAN+mWwAOAAAAAAAA
        AAAgGONOJRjj/ygY4/8qGOP/Kxjj/ywY4/8tGOP/LRjj/y4Y478AAAAAolYALqVZAM+oXgA+AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAunMADrt1AI+8dgD/vXcA/754AP++eAD/vngA/713AP+7dAD/tm4A/65k
        AH4AAAAAAAAAACAY498mGOP/KBjj/ykY4/8rGOP/Kxjj/ywY4/8tGOPfLhjjDqJWAA6jVwCvplsADgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL55AF6/egD/wHoA/8B7AP/AegD/wHoA/795
        AP+9dgD/t28A/7JpAB4ZGONuIhjj/yYY4/8oGOP/KRjj/yoY4/8rGOP/LBjj/ywY4z4AAAAAolYAfqJX
        AA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMF8AF7CfQD/w30A/8J9
        AP/CfAD/wnwA/8F6AP+9dwD/t28AjxoY478jGOP/Jhjj/ygY4/8pGOP/Khjj/yoY4/8rGOOfAAAAAAAA
        AACiVgAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMR/
        AJ/EfwD/xH8A/8R/AP/EfwD/w30A/8F7AP+9dgDPGxjj3yMY4/8mGOP/Jxjj/ygY4/8pGOP/Khjj/ysY
        4x4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAxYAADsWBAN/GgQD/xoEA/8aBAP/GgAD/xH8A/8B6AP8bGOP/Ixjj/yYY4/8nGOP/KBjj/ygY
        4/8pGOOfAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAx4MAPsiDAP/IhAD/yIMA/8eCAP/HggD/xH4A/xsY4/8jGOP/JRjj/yYY
        4/8nGOP/KBjj/ykY4z4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyoUAv8qGAP/KhQD/yoUA/8mEAP/GgQD/Ghjj/yIY
        4/8kGOP/JRjj/yYY4/8nGOPvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJJ9PDgAAAADLhwBOy4cA/8yHAP/LhwD/y4YA/8mD
        AP8ZGOPPIRjj/yQY4/8kGOP/JRjj/yYY468AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjn09OI59PHgAAAADNiQDfzYkA/82J
        AP/NiAD/y4YA/xgY448fGOP/Ixjj/yQY4/8kGOP/JRjjfgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjn1CfAAAAAM6L
        AI/PiwD/z4sA/86KAP/NiAC/GBjjXhwY4/8iGOP/Ixjj/yMY4/8kGON+AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACOg
        Ua8jn1AO0I0APtGNAP/RjQD/0IwA/8+KAH4AAAAAGRjjzyAY4/8hGOP/Ihjj/yMY434AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAIqFUfiOgUl4AAAAA0o8A/9KOAP/SjgD/0o0APgAAAAAYGOM+HBjj/yAY4/8hGOP/IRjjrwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAholZ+I6BRnwAAAADTkADP1JAA/9SPAO8AAAAAAAAAAAAAAAAZGOOfHxjj/yAY
        4/8gGOP/IBjjDgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAACGjWH4ioFK/AAAAANaSAL/WkgD/1ZEAjwAAAAAAAAAAAAAAAAAA
        AAAcGOOfHhjj/x8Y4/8fGOOPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIKRaryKhVM8AAAAA15QAv9eUAP/XkwAeAAAAAAAA
        AAAAAAAADb6VXgAAAAAcGOOfHRjj/x0Y4/8dGONeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB6mXw4gpFv/IqFV/wAAAADZlgC/2ZYAvwAA
        AAAAAAAAAAAAAAAAAAANvpQeDr2Sjw68kA4bGONOGxjj3xwY4/8cGOOPGxjjDgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHqZgryCkW/8joFPvAAAAANuY
        AL/bmAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAOvJFuD7uPzw+7jS4AAAAAGhjjXhoY478aGOPvGhjjjxkY
        4z4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2oZG4epmD/IKRb/yKg
        VK8AAAAA3ZoAjwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQu47PELqM/xC5ip8RuYgeAAAAAAAA
        AAAYGOM+GBjjPhgY414YGOMuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABurah4cqWevHahk/x6m
        YP8gpFr/I6BSbt+dAE7enAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABG6jC4RuYvvEbmJ/xG4
        h/8St4XPEraEbhO2gi4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmtbk4arGyfG6tq/xyp
        Z/8dqGT/HqZh/yKiV/8jn08+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABK5
        iV4SuIj/EreG/xO2hP8TtoL/E7WB/xS0f/8Vs33PFbN7vxayeb8WsXe/F7B1vxivc88YrnH/Ga1u/xqs
        bP8bqmn/HKlm/x2oZP8gpV7/I6BSzwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABO3hp8TtoX/E7aD/xS1gv8UtYD/FbR+/xWzfP8Wsnr/FrF5/xewdv8Yr3T/GK5y/xmu
        cP8arG7/G6tr/xyqaP8dqWb/HqZh/yKhVP8kn08+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABW1g58UtYL/FbSA/xW0f/8Vs33/FrJ7/xaxef8XsXj/GLB2/xiv
        c/8ZrnH/Ga1v/xqsbf8cqmr/HKln/x6nY/8iolf/I59QrwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABazf58Ws37/FrN9/xaye/8XsXr/F7F4/xiw
        dv8Yr3T/Ga5z/xmtcP8arG7/G6tr/x2paP8ep2T/IaJY/yOfUM8jn04OAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABmxe34YsXr/GLF5/xiw
        eP8YsHb/Ga91/xmucv8arXD/G6xu/xyrbP8dqWj/IKZh/yKiWP8jn1HPJJ9PDgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABuu
        dy4brnS/G650/xquc/8brXH/G6xv/xyrbf8eqWn/H6dl/yGkXP8ioVTvI59QfiSfTw4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAdq24+Hqprnx6pae8fp2X/IKVg/yGjWv8ioVXfI59QbiSfTw4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/gf//+A8B/+AYAH/AMAAfAGfADwDf4A4Bv
        /gGA//8AAP//AAH//4AB///AA///wAP//+AD///gB///oIf//7GH///xw///0cP//9Hh//+T8f//k+x/
        /xf3H/8X8f/8P/h/8D/8AAA//AAAf/4AAH//AAD//8AB///gB///+B//KAAAABAAAAAgAAAAAQAgAAAA
        AAAABAAAAAAAAAAAAAAAAAAAAAAAAP38/wEAAAAA7ev8AZ2T8kBgTuqRKA7e0yII7eZqUt2Ed0Z8YoxL
        OIarXgCjqF8LncibZ1rkz7cMAAAAAP79/AIAAAAAwb33ITMj5LUgC+H8JAze/z0r+t99WqhhoFEAl7dr
        AemwYgD/s2oB/7ZvA/6sXgD/rWQM19OvgzYAAAAAwL73GyIU49skEeL/MRzh/ykV7uSjhKhAvnUGfM+k
        bVjm0roP3byLLL16D5+5bwD/wHsF/L53Bf+nVADt0al4L0pE6ZkeDuL/MB7j+SMP5v9pVt5Sr2YKON7G
        rhoAAAAA/v38Af/+/gIAAAAA0qFLcr52AP/CfgT5wXwD/7lzB68YEePqKxvj/iQT4v86KemqAAAAAOrX
        wRAAAAAA/Pv4A/79/AH+/PoD////AwAAAADHhBSgw30A/8WAAf3AegH2Ihrj/ikb4/8YB+H/lYzxQAAA
        AAD7+v4E/v38AQAAAAAAAAAAAAAAAP/9/AIAAAAA79m0GMiAAOjJhQD/x4IB/h4X4/IiFeP/MCPk2+7t
        /QgAAAAA/fz8AQAAAAAAAAAAAAAAAAAAAAAAAAAA6/btCHzLogvgrE+KyYIA/8yJBfsgHeS5IBXi/zAl
        5bIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/P78AgAAAACD0K1DmqlPTtuKAP/LhwPVhYPxTAYA
        4P8vKOPDAAAAAP///wL9/f8BAAAAAAAAAAAAAAAAAAAAAPv9/AIAAAAAfsqfRnS8gU/qmhbo16Q1mwAA
        AABoYu+JCgDl/42N7zYAAAAA+/v/Avz8/wEAAAAAAAAAAAAAAAD4/PoEAAAAAHnJnl5/xZR465oQu+XE
        d0Xx/fgBWNazNSBJz4gxG++9f3vxP+vr/Ar///4B+/78BPv9/AT8/v0E////AQAAAAAepmC5i8eWnfKt
        Mnj38+IKAAAAAKjn1ysPw4igTJu/YFpm42xAPOk6q539CgAAAAD///4BAAAAAMjr2wlWvouJB6BZ/4Gs
        UWv/1Y4eAAAAAP///wMAAAAAVcurcQO6d/8vz4qzRruiiHW+vnCE1blik9q+ZVvFmY4NpmLeE6Vg/xqh
        Vue93LobAAAAAP3//wEAAAAA/f/+AgAAAABYyaiOAKp1/xO3fP0Js3D/Bats/wSoZv8NqGf/Iq5w/BWh
        V/9Wtnl6AAAAAP7//gQAAAAAAAAAAAAAAAD+//4CAAAAAF3JpIADqm/9HLF7/x2xd/wernP7IK1v/Bai
        Wf8fnU6ixubRAQAAAAAAAAAAAAAAAAAAAAAAAAAA/f/+Af///wMAAAAAhtS2RCCuc78bqmv7Iahn/xug
        VdlOsnNkyOfSBQAAAAD9/v0BAAAAAAAAAADwjwAAwgMAAIfBAAAP8AAAD/AAAB/4AAAf+AAAH/wAAJ/8
        AACf/QAAz/MAAN/nAADjhwAA4A8AAPAPAAD8PwAA
</value>
  </data>
</root>